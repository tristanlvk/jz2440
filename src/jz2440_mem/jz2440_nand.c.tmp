/*
 * jz2440_nand
 */

#include "jz2440_nand.h"

#define TXD0READY   (1<<2)

/*
 * jz2440_nand_init
 */
void jz2440_nand_init(void)
{
    /* timing parameters pls refer to NAND Flash datasheet */
    #define TACLS   0
    #define TWRPH0  1
    #define TWRPH1  0

    /* NFCONF */
    NFCONF = (TACLS<<12) | (TWRPH0<<8) | (TWRPH1<<4);
    /* NFCONT
     *  init ECC controller
     *  disable CE because HW not connected.
     */
    NFCONT = (1<<4)|(1<<1)|(1<<0);
}

/*
 * jz2440_nand_select
 */
static void jz2440_nand_select(void)
{
    NFCONT &= ~(1<<1);
}

/*
 * jz2440_nand_deselect
 */
static void jz2440_nand_deselect(void)
{
    NFCONT |= (1<<1);
}


/*
 * jz2440_nand_cmd
 */
static void jz2440_nand_cmd(unsigned char cmd)
{
    volatile int i;
    NFCMD = cmd;
    for (i = 0; i < 10; i++);
}


/*
 * jz2440_nand_addr
 */
static void nand_addr(unsigned int addr)
{
    unsigned int col  = addr % 2048;
    unsigned int page = addr / 2048;
    volatile int i;

    NFADDR = col & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR = (col >> 8) & 0xff;
    for (i = 0; i < 10; i++);

    NFADDR  = page & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR  = (page >> 8) & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR  = (page >> 16) & 0xff;
    for (i = 0; i < 10; i++);
}


/*
 * jz2440_nand_page
 */
static void jz2440_nand_page(unsigned int page)
{
    volatile int i;

    NFADDR  = page & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR  = (page >> 8) & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR  = (page >> 16) & 0xff;
    for (i = 0; i < 10; i++);
}


/*
 * jz2440_nand_col
 */
static void jz2440_nand_col(unsigned int col)
{
    volatile int i;

    NFADDR = col & 0xff;
    for (i = 0; i < 10; i++);
    NFADDR = (col >> 8) & 0xff;
    for (i = 0; i < 10; i++);
}


/*
 * jz2440_nand_wait_ready
 */
static void jz2440_nand_wait_ready(void)
{
    while (!(NFSTAT & 1));
}

/*
 * jz2440_nand_data
 */
static unsigned char jz2440_nand_data(void)
{
    return NFDATA;
}

/*
 * jz2440_nand_bad
 */
int jz2440_nand_bad(unsigned int addr)
{
    unsigned int col  = 2048;
    unsigned int page = addr / 2048;
    unsigned char val;

    nand_select();

    nand_cmd(0x00);

    nand_col(col);
    nand_page(page);

    nand_cmd(0x30);

    nand_wait_ready();

    val = nand_data();

    nand_deselect();

    if (val != 0xff)
        return 1;  /* bad blcok */
    else
        return 0;
}

/*
 * jz2440_nand_read
 */
void jz2440_nand_read(unsigned int addr, unsigned char *buf, unsigned int len)
{
    int col = addr % 2048;
    int i = 0;

    while (i < len) {
        if (!(addr & 0x1FFFF) && jz2440_nand_bad(addr))
        {
            addr += (128*1024);
            continue;
        }

        /* 1. 选中 */
        nand_select();


        /* 2. 发出读命令00h */
        nand_cmd(0x00);

        /* 3. 发出地址(分5步发出) */
        nand_addr(addr);

        /* 4. 发出读命令30h */
        nand_cmd(0x30);

        /* 5. 判断状态 */
        nand_wait_ready();

        /* 6. 读数据 */
        for (; (col < 2048) && (i < len); col++)
        {
            buf[i] = nand_data();
            i++;
            addr++;
        }

        col = 0;


        /* 7. 取消选中 */
        nand_deselect();

    }
}

